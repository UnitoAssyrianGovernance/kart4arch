<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving
and Interchange DTD v1.2 20190208//EN" "JATS-archivearticle1.dtd">
<article xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:xlink="http://www.w3.org/1999/xlink" dtd-version="1.2" article-type="other">
  <front>
    <article-meta>
      <title-group>
        <article-title>A tutorial for versioning archaeological data using
Kart</article-title>
      </title-group>
      <contrib-group>
        <contrib contrib-type="author" corresp="yes">
          <contrib-id contrib-id-type="orcid">0000-0002-7322-8634</contrib-id>
          <name>
            <surname>Titolo</surname>
            <given-names>Andrea</given-names>
          </name>
          <string-name>Andrea Titolo</string-name>
          <email>andrea.titolo@unito.it</email>
          <role vocab="https://credit.niso.org" vocab-term="writing – original draft" vocab-term-identifier="https://credit.niso.org/contributor-roles/writing-original-draft/">writing</role>
          <xref ref-type="aff" rid="aff-1">a</xref>
          <xref ref-type="corresp" rid="cor-1">*</xref>
        </contrib>
        <contrib contrib-type="author">
          <contrib-id contrib-id-type="orcid">0000-0003-0758-5032</contrib-id>
          <name>
            <surname>Palmisano</surname>
            <given-names>Alessio</given-names>
          </name>
          <string-name>Alessio Palmisano</string-name>
          <role vocab="https://credit.niso.org" vocab-term="writing – original draft" vocab-term-identifier="https://credit.niso.org/contributor-roles/writing-original-draft/">writing</role>
          <xref ref-type="aff" rid="aff-1">a</xref>
        </contrib>
      </contrib-group>
      <aff id="aff-1">
        <institution-wrap>
          <institution>Department of Historic Studies, University of Turin, Turin,
Italy</institution>
        </institution-wrap>
      </aff>
      <author-notes>
        <corresp id="cor-1">andrea.titolo@unito.it</corresp>
      </author-notes>
      <history/>
    </article-meta>
  </front>
  <body>
    <sec id="foreword">
      <title>1. Foreword</title>
      <p>
        <underline>The following tutorial have been successfully reproduced
  on macOS 12 and 13 (Monterey and Ventura), and Pop! OS 22.04
  (Ubuntu-based).</underline>
      </p>
      <p>Please see the requirements below
  (<xref alt="Section 1.1" rid="sec-requirements">Section 1.1</xref>)
  and the useful links
  (<xref alt="Section 5" rid="sec-resources">Section 5</xref>) for
  external resources or tutorials.</p>
      <boxed-text>
        <p>
          <bold>Tip</bold>
        </p>
        <p>When using text in CAPITAL_LETTERS inside a code block/line, it
  usually means that you need to replace those with your own variables.
  For example, for a code like
  <monospace>mkdir YOUR_FOLDER_NAME</monospace>, if you want your folder
  to be called <monospace>kart_example</monospace>, you will need to
  write <monospace>mkdir kart_example</monospace>.</p>
      </boxed-text>
      <p>During the Getting Started
  (<xref alt="Section 2" rid="sec-getting-started">Section 2</xref>) and
  Getting Started with Kart
  (<xref alt="Section 3" rid="sec-getting-started-kart">Section 3</xref>)
  sections, the examples will provide mostly terminal commands, since it
  will be impossible to provide instructions for all the existing
  graphical file managers (e.g. Finder, Windows Explorer, Dolphin,
  Nautilus, etc.). You can use a graphical file manager, of course, the
  textual documentation should be clear enough for that workflow too.
  Kart commands (identified by the <monospace>kart</monospace> prefix)
  should of course be run in the terminal.</p>
      <p>In the Working with Kart
  (<xref alt="Section 3.5" rid="sec-working-kart">Section 3.5</xref>)
  section, we will instead use the graphical plugin for QGIS but, when
  possible, corresponding terminal commands will be given. If you are
  unsure about some commands, the
  <ext-link ext-link-type="uri" xlink:href="https://docs.kartproject.org/en/latest/pages/command_reference.html">kart
  command reference</ext-link> is an excellent documentation, otherwise
  man pages are available for individual commands using
  <monospace>kart COMMAND --help</monospace>,
  e.g. <monospace>kart status --help</monospace>.</p>
      <p>While Kart can
  <ext-link ext-link-type="uri" xlink:href="https://docs.kartproject.org/en/latest/pages/raster_datasets.html">also
  be used to version raster data</ext-link>, this tutorial will only
  cover the vector dataset usage.</p>
      <p>We use Github here as our git forge and we will usually mention it
  throughout the text. However, it is completely possible to reproduce
  this tutorial on other forges such as Gitlab or Codeberg. When
  possible we will mention guides for those forges as well.</p>
      <p>While this tutorial is focused on QGIS, editing with ArcGIS/GDAL,
  etc. is supported by kart, although you will not have access to the
  graphical plugin.</p>
      <boxed-text>
        <p>
          <bold>Note</bold>
        </p>
        <p>We noticed some difficulties in getting kart to work properly on
  older versions of macOS, likely because of outdated versions of git,
  xcode, xcode command line tools, etc. For a smoother experience we
  recommend using <bold>AT LEAST</bold> macOS 12 (Monterey) and XCode
  13.</p>
        <p>On Linux, if you are running the Flatpak version of QGIS, the kart
  plugin (see below) might have problems finding the kart binary.
  Switching to a different version of QGIS (e.g. following
  <ext-link ext-link-type="uri" xlink:href="https://qgis.org/en/site/forusers/alldownloads.html#debian-ubuntu">these
  instructions</ext-link>) seems to solve the issue, otherwise you might
  need to see if the issue can be solved using some apps such as
  <ext-link ext-link-type="uri" xlink:href="https://github.com/tchx84/Flatseal">Flatseal</ext-link>.</p>
      </boxed-text>
      <boxed-text>
        <p>
          <bold>Note</bold>
        </p>
        <p>While this tutorial is presented here in a stable state, it is by
  no means finalized, we will keep adding and correcting things based on
  our continuing experience with kart and the evolution of kart
  itself.</p>
      </boxed-text>
      <sec id="sec-requirements">
        <title>1.1 Requirements</title>
        <p>To avoid an endless guide, the instructions and tutorial below
    assumes the following:</p>
        <list list-type="bullet">
          <list-item>
            <p>You are familiar with git and you have git installed on your
        machine (there are many guides available online, for example
        <ext-link ext-link-type="uri" xlink:href="https://dev.to/jitendrachoudhary/understanding-git-a-beginners-guide-to-version-control-with-visuals-5cbf">de1v.to</ext-link>,
        or
        <ext-link ext-link-type="uri" xlink:href="https://www.atlassian.com/git">Atlassian</ext-link>,
        or
        <ext-link ext-link-type="uri" xlink:href="https://rogerdudler.github.io/git-guide/index.html">this
        other one</ext-link>). If you don’t have git installed, please
        follow the instruction
        <ext-link ext-link-type="uri" xlink:href="https://git-scm.com/">on
        the Git website</ext-link>.</p>
          </list-item>
          <list-item>
            <p>You have at least one authenticated profile for Github (see
        <ext-link ext-link-type="uri" xlink:href="https://docs.github.com/en/get-started/getting-started-with-git">https://docs.github.com/en/get-started/getting-started-with-git</ext-link>)
        or for your git forge of choice (e.g. ).</p>
          </list-item>
          <list-item>
            <p>You are are familiar or at least not afraid of using a
        terminal application (e.g. Terminal.app, Powershell, Konsole,
        Gnome Terminal, Kitty, Wezterm, Alacritty).</p>
          </list-item>
          <list-item>
            <p>You are familiar with QGIS and its interface, and you have
        <bold>QGIS 3.16 or higher</bold> installed on your machine
        (otherwise please install it from the
        <ext-link ext-link-type="uri" xlink:href="https://qgis.org">QGIS
        website</ext-link>).</p>
          </list-item>
        </list>
      </sec>
    </sec>
    <sec id="sec-getting-started">
      <title>2. Getting Started</title>
      <sec id="sec-install-kart">
        <title>2.1 Install Kart</title>
        <p>Go to
    <ext-link ext-link-type="uri" xlink:href="https://kartproject.org/">https://kartproject.org/</ext-link>
    and in the dropdown menu under “Download for your OS” select the
    appropriate package for your OS. Then, open the file and follow the
    instruction to install the software.</p>
        <p>Alternatively, platform specific instructions follows below.
    These instructions are taken from the
    <ext-link ext-link-type="uri" xlink:href="https://docs.kartproject.org/en/latest/pages/quick_guide.html#installing">kart
    official documentation</ext-link>, <underline>please always double
    check</underline> the source website before running terminal
    commands:</p>
        <p>
          <bold>Windows</bold>
        </p>
        <p>Download the .msi installer from the
    <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart/releases">release
    page</ext-link>.</p>
        <p>
          <bold>macOS</bold>
        </p>
        <p>Download the .pkg installer from the
    <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart/releases">release
    page</ext-link>.</p>
        <p>Or use Homebrew to install:
    <monospace>brew install koordinates/kart/kart --cask</monospace></p>
        <p>
          <bold>Linux</bold>
        </p>
        <p>For Debian/Ubuntu-based distributions, download the .deb package
    from the
    <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart/releases">release
    page</ext-link> and install via
    <monospace>dpkg -i kart_*.deb</monospace></p>
        <p>For RPM-based distributions, download the .rpm package from the
    <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart/releases">release
    page</ext-link> and install via
    <monospace>rpm -i kart-*.rpm</monospace></p>
        <p>
          <bold>Testing install</bold>
        </p>
        <p>Test your install by running
    <monospace>kart --version</monospace> in your terminal. If you want,
    you can follow the
    <ext-link ext-link-type="uri" xlink:href="https://docs.kartproject.org/en/latest/pages/quick_guide.html#create-a-new-repository-import-dataset">Quick
    Start guide</ext-link> in kart documentation and running
    <monospace>kart status</monospace> at one point.</p>
      </sec>
    </sec>
    <sec id="sec-getting-started-kart">
      <title>3. Getting Started with Kart</title>
      <sec id="sec-setup">
        <title>3.1 Set up</title>
        <p><underline><bold>If you have never used git</bold></underline>
    you should run the following commands (replacing the quoted text
    with your actual information):</p>
        <code language="bash">kart config --global user.email "you@example.com"</code>
        <code language="bash">kart config --global user.name "Your Name"</code>
        <p>To understand what the above do, you can take a look at the
    <ext-link ext-link-type="uri" xlink:href="https://docs.github.com/en/get-started/getting-started-with-git/set-up-git#setting-up-git">Getting
    Started with Git</ext-link> guide from the Github Docs, specifically
    the parts about
    <ext-link ext-link-type="uri" xlink:href="https://docs.github.com/en/get-started/getting-started-with-git/setting-your-username-in-git">Setting
    up your username</ext-link> and your
    <ext-link ext-link-type="uri" xlink:href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-personal-account-on-github/managing-email-preferences/setting-your-commit-email-address">commit
    email address</ext-link>.</p>
        <p>If you have already used git, chances are you have the above
    already set-up, and you can continue on.</p>
        <p>Create an empty folder where your kart projects will live and
    move into it:</p>
        <code language="bash">mkdir kart-workflow &amp;&amp; cd kart-workflow</code>
        <p>As with git, there are different ways in which to get started
    with kart. Here we will take a look at the most likely (in our
    opinion) cases:</p>
        <list list-type="order">
          <list-item>
            <p>We have already existing data and we want to start versioning
        from scratch.</p>
          </list-item>
          <list-item>
            <p>We have versioned data already existing on a remote
        repository and we want to import those data on our machine.</p>
          </list-item>
        </list>
      </sec>
      <sec id="sec-https-ssh">
        <title>3.2 A word about HTTPS and SSH</title>
        <p>HTTPS connection to github and usually other forges requires
    <ext-link ext-link-type="uri" xlink:href="https://docs.github.com/en/get-started/getting-started-with-git/why-is-git-always-asking-for-my-password">additional
    steps</ext-link> to avoid having git prompting you with a username
    and password request every time you interact with the server. This
    is usually solved by setting-up a
    <ext-link ext-link-type="uri" xlink:href="https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens">Personal
    Access Token</ext-link> or by
    <ext-link ext-link-type="uri" xlink:href="https://docs.github.com/en/get-started/getting-started-with-git/caching-your-github-credentials-in-git">caching
    your credentials in Git</ext-link>. Note that failing to cache or
    save the credentials on your machine in some ways may result in an
    error when pushing to a remote repository from the QGIS
    interface.</p>
        <p>For a more seamsless experience (in our opinion), you can follow
    <ext-link ext-link-type="uri" xlink:href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">this
    guide</ext-link> to setup an SSH key pair for Github, but guides are
    also available for
    <ext-link ext-link-type="uri" xlink:href="https://docs.gitlab.com/ee/user/ssh.html">Gitlab</ext-link>
    and
    <ext-link ext-link-type="uri" xlink:href="https://docs.codeberg.org/security/ssh-key/">Codeberg</ext-link>.</p>
        <sec id="generating-ssh-keys-optional">
          <title>3.2.1 Generating SSH keys (Optional)</title>
          <p>The guides above for creating and adding an SSH key should be
      exhaustive enough, but we can repeat some steps here. These steps
      below are general but have been reproduced on MacOS only.</p>
          <boxed-text>
            <p>
              <bold>Important</bold>
            </p>
            <p>If you have no previous experience, follow the guide above,
      these steps are not meant to replace it.</p>
          </boxed-text>
          <list list-type="order">
            <list-item>
              <p>Generate a new ssh key
          <monospace>ssh-keygen -t ed25519 -C "your_email@example.com"</monospace>
          (the mail should be the same used for your github account) and
          follow the on-screen instructions for inputting a
          passphrase.</p>
            </list-item>
            <list-item>
              <p>Ensure the ssh-agent is running
          <monospace>eval "$(ssh-agent -s)"</monospace></p>
            </list-item>
            <list-item>
              <p>If you are on macOS 10.12.2 or later, manually edit the
          ~/.ssh/config file as explained in the
          <ext-link ext-link-type="uri" xlink:href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent?platform=mac#adding-your-ssh-key-to-the-ssh-agent">same
          guide</ext-link>.</p>
            </list-item>
            <list-item>
              <p>Add the ssh key to the ssh-agent
          <monospace>ssh-add ~/.ssh/id_ed25519</monospace> (if you are
          on macOS, you can store the ssh passphrase in your keychain by
          running
          <monospace>ssh-add --apple-use-keychain ~/.ssh/id_ed25519</monospace>)</p>
            </list-item>
            <list-item>
              <p>Add the key to your github account following the
          <ext-link ext-link-type="uri" xlink:href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">respective
          guide</ext-link>.</p>
            </list-item>
          </list>
        </sec>
      </sec>
      <sec id="sec-kart-empty">
        <title>3.3 Example 1: use an empty Kart repository</title>
        <sec id="download-data">
          <title>3.3.1 Download data</title>
          <p>Download the sample data. You can download this file anywhere
      on your machine.</p>
          <p>You can get the data from the same folder where this tutorial
      lives, by going to
      <ext-link ext-link-type="uri" xlink:href="https://github.com/UnitoAssyrianGovernance/kart4arch/raw/main/static/kart-workflow-example.gpkg">this
      link</ext-link>.</p>
          <p>Alternatively, you can use the following CLI tools by pasting
      the commands in your terminal (Aria2 is likely not installed in
      your system).</p>
          <p>
            <bold>Wget</bold>
          </p>
          <code language="bash">wget https://github.com/UnitoAssyrianGovernance/kart4arch/raw/main/static/kart-workflow-example.gpkg</code>
          <p>
            <bold>Aria2</bold>
          </p>
          <code language="bash">aria2c https://github.com/UnitoAssyrianGovernance/kart4arch/raw/main/static/kart-workflow-example.gpkg</code>
          <p>
            <bold>Curl</bold>
          </p>
          <code language="bash">curl -O https://github.com/UnitoAssyrianGovernance/kart4arch/raw/main/static/kart-workflow-example.gpkg</code>
        </sec>
        <sec id="sec-kart-import">
          <title>3.3.2 Import data in Kart</title>
          <p>Create an empty folder on your machine and move inside that
      folder (you can use “kart-tutorial” or replace it with your own
      folder name). Be sure to copy the absolute path of where you saved
      your geopackage before (the .gpkg extension <bold>MUST</bold> be
      included).</p>
          <code language="bash">kart init kart-tutorial --import GPKG:path/to/your/geopackage.gpkg</code>
          <p>For example, if you created the
      <monospace>kart-workflow</monospace> folder in the above steps,
      and you are on MacOS, your command will look like (run inside the
      <monospace>kart-workflow</monospace> folder):</p>
          <code language="bash">kart init kart-tutorial --import GPKG:kart-workflow-example.gpkg</code>
          <p>The terminal should output something like this (cut for
      convenience, your output will be longer)</p>
          <code language="bash">Initialized empty Git repository in path/to/kart-workflow/kart-tutorial/.kart/
Starting git-fast-import...
Importing 4 features from kart-workflow-example.gpkg:archaeo_locationquality to archaeo_locationquality/ ...
Added 4 Features to index in 0.0s
Overall rate: 1390 features/s)
Closed in 0s
Importing 106 features from kart-workflow-example.gpkg:archaeo_periodisation to archaeo_periodisation/ ...
Added 106 Features to index in 0.0s
Overall rate: 21077 features/s)
Closed in 0s
[...]
Creating GPKG working copy at kart-tutorial.gpkg ...
Writing features for dataset 1 of 12: archaeo_status
archaeo_status: 100%|█████████████████████████████████████████████████████████████████| 8/8 [00:00&lt;00:00, 11679.23F/s]
[...]</code>
        </sec>
      </sec>
      <sec id="sec-clone-repo">
        <title>3.4 Example 2: Clone an existing Kart repository</title>
        <p><bold>Do not</bold> use standard git commands
    (<monospace>git clone</monospace>) or Github CLI
    (<monospace>gh repo clone</monospace>) or any other similar commands
    or CLI tools to clone the repository, as this will not work as
    intended. Use only the <monospace>kart clone</monospace>
    command.</p>
        <sec id="sec-clone">
          <title>3.4.1 Clone the repository</title>
          <p>We provide a versioned
      <ext-link ext-link-type="uri" xlink:href="https://github.com/UnitoAssyrianGovernance/kart-tutorial-dataset">github
      repo</ext-link> ready to clone.</p>
          <sec id="sec-clone-https">
            <title>3.4.1.1 Cloning with HTTPS</title>
            <code language="bash">kart clone https://github.com/UnitoAssyrianGovernance/kart-tutorial.git</code>
            <boxed-text>
              <p>
                <bold>Tip</bold>
              </p>
              <p>You can use your own folder name instead of the default
        “kart-tutorial” by adding a name at the end of the command,
        e.g. <monospace>kart clone https://github.com/UnitoAssyrianGovernance/kart-tutorial.git kartproject</monospace></p>
            </boxed-text>
          </sec>
          <sec id="sec-clone-ssh">
            <title>3.4.1.2 Cloning with SSH</title>
            <code language="bash">kart clone git@github.com:UnitoAssyrianGovernance/kart-tutorial.git</code>
          </sec>
        </sec>
      </sec>
      <sec id="sec-working-kart">
        <title>3.5 Working with Kart</title>
        <p>Run <monospace>kart status</monospace> , if you see something
    like</p>
        <code language="bash">On branch main

Nothing to commit, working copy clean</code>
        <p>you are good to go, the repository has been correctly initialized
    or cloned. If not, please repeat the above steps carefully.</p>
        <sec id="sec-kart-plugin-install">
          <title>3.5.1 Install the Kart QGIS Plugin</title>
          <p>Kart comes with a useful plugin for QGIS. The source code for
      this plugin is available on
      <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart-qgis-plugin">Github</ext-link>.
      To install the latest version of the plugin, use the QGIS Plugin
      Manager and search for the Kart plugin. Alternatively, you can get
      the latest version from the
      <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart-qgis-plugin/releases/latest">release
      page</ext-link>, then open the QGIS Plugin manager and install the
      downloaded zip file.</p>
          <p>As long as you have kart installed, the plugin can also take
      care of creating a new repo, cloning an existing one (i.e. the
      steps we did above), etc. The plugin <bold>has an excellent
      documentation with substantial graphical examples, so we link to
      the
      <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart-qgis-plugin/blob/main/docs/index.md">official
      docs</ext-link> instead of rewriting our own.</bold></p>
        </sec>
        <sec id="set-up-the-plugin">
          <title>3.5.2 Set up the plugin</title>
          <p>Not much setup is needed, the plugin should identify the kart
      binary automatically. If not, go to <italic>Plugins &gt; Kart &gt;
      Settings</italic> menu to open the settings dialog. In the
      <italic>Kart executable folder</italic> field, enter the path to
      your Kart executable. If the Kart folder is not configured, the
      Kart plugin will use the default install locations, as
      follows:</p>
          <list list-type="bullet">
            <list-item>
              <p><bold>Windows</bold>:
          <monospace>%PROGRAMFILES%\Kart\</monospace></p>
            </list-item>
            <list-item>
              <p><bold>OSX</bold>:
          <monospace>/Applications/Kart.app/Contents/MacOS/</monospace></p>
            </list-item>
            <list-item>
              <p><bold>Linux</bold>: <monospace>/opt/kart/</monospace></p>
            </list-item>
          </list>
          <p>We also recommend toggling off the option “Commit automatically
      after closing editing”. Depending on your editing workflow, you
      might end up with hundreds of commits adding one point each
      without realizing. <bold>Of course, this means that you will have
      to remember to commit your edits manually.</bold></p>
          <p>When changes have been done, close the plugin dialog box with
      “Ok”.</p>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-settings.png"/>
        </sec>
        <sec id="connect-to-a-local-repository">
          <title>3.5.3 Connect to a local repository</title>
          <p>If a side panel has not already appeared, click on
      <italic>Plugins &gt; Kart &gt; Repositories</italic> to open the
      kart panel. The panel will look empty, but we will populate it
      with the repository we created before.</p>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-panel.png"/>
          <p>In order to do so, right click on “Repositories”. You will see
      a list of options: the last two (<italic>Create new
      repository</italic> and <italic>Clone repository</italic>) are
      graphical replacement to the steps we did before
      (<xref alt="Section 3.3" rid="sec-kart-empty">Section 3.3</xref>
      and
      <xref alt="Section 3.4" rid="sec-clone-repo">Section 3.4</xref>).</p>
          <p>Click on <italic>Add existing repository…</italic> and navigate
      to the <italic>kart-workflow</italic> folder we created before,
      then click on “Open”.</p>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-panel-right-click.png"/>
          <p>You will see the repository path now listed inside the panel
      under the name
      <monospace>path/kart-workflow/kart-tutorial [main]</monospace>.
      The <monospace>[main]</monospace> bit indicates the branch on
      which we are working (just as the git branches, more on this on
      the
      <ext-link ext-link-type="uri" xlink:href="https://docs.kartproject.org/en/latest/pages/quick_guide.html#branching">kart
      documentation</ext-link> and below in
      <xref alt="Section 3.6.1" rid="sec-branching">Section 3.6.1</xref>).</p>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-panel-expand.png"/>
          <boxed-text>
            <p>
              <bold>Tip</bold>
            </p>
            <p>For more information on the data, see the Appendix or our
      <ext-link ext-link-type="uri" xlink:href="https://github.com/UnitoAssyrianGovernance/.github/wiki/GIS-Vector-Data#main-layer-table-structure">wiki
      section</ext-link>.</p>
          </boxed-text>
        </sec>
        <sec id="load-data-inside-the-project">
          <title>3.5.4 Load data inside the project</title>
          <p>What you connected to is what kart calls
      <ext-link ext-link-type="uri" xlink:href="https://docs.kartproject.org/en/latest/pages/quick_guide.html#workflow">working
      copy</ext-link>, i.e. a file living on your computer that you can
      interact with through GIS. Kart uses different
      <ext-link ext-link-type="uri" xlink:href="https://docs.kartproject.org/en/latest/pages/wc_types.html">working
      copy types</ext-link>, in our case the
      <ext-link ext-link-type="uri" xlink:href="https://docs.kartproject.org/en/latest/pages/wc_types/gpkg_wc.html">Geopackage
      working copy</ext-link>.</p>
          <p>To add the layers to our QGIS project, expand the repository
      tree by clicking on the arrow button on the left in the kart
      panel. Right-click on the <monospace>archaeo_sites</monospace>
      layer and click on <italic>Add to QGIS Project</italic>. A point
      layer should appear on the map and the CRS should change to
      EPSG:32636. Add also all the other layers (you should have 10
      tabular layer and another 1 geometry layer. Add <underline>all of
      them</underline> except the <monospace>layer_styles</monospace>
      layer. These table layer are background data useful for populating
      records in the main layer (archaeo_sites) through
      <ext-link ext-link-type="uri" xlink:href="https://docs.qgis.org/3.34/en/docs/user_manual/working_with_vector/vector_properties.html#edit-widgets">QGIS
      value relation widgets</ext-link>.</p>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-panel-add-project.png"/>
        </sec>
        <sec id="sec-add-geom">
          <title>3.5.5 Add new geometry to existing layers</title>
          <p>You can now proceed to add new data as you would do normally in
      QGIS. Toggle the editing for the
      <monospace>archaeo_sites</monospace> layer and click on the
      <italic>Add Point Feature</italic> button. Click anywhere and add
      a new point. Fill the attribute table however you like. The tab
      structure you will see in the new feature prompt is thank to
      <ext-link ext-link-type="uri" xlink:href="https://docs.qgis.org/3.34/en/docs/user_manual/working_with_vector/vector_properties.html#attributes-form-properties">QGIS
      attribute form feature</ext-link>, and because the style of the
      layer is saved inside the geopackage, and versioned in kart as
      well (this was the <monospace>layer_styles</monospace> layer
      present in the repository listing in the kart panel.</p>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/qgis-add-new-feature.png"/>
          <p>Save the edits by either closing the editing tool or clicking
      on the <italic>Save Layer Edits</italic> button.</p>
        </sec>
        <sec id="edit-an-existing-geometry">
          <title>3.5.6 Edit an existing geometry</title>
          <p>Let’s edit an existing point now, for example by changing its
      position and modifying some attributes. Use the
      <ext-link ext-link-type="uri" xlink:href="https://docs.qgis.org/3.34/en/docs/user_manual/introduction/general_tools.html#identify">identify
      features tool</ext-link> to quickly access the attribute table of
      a point of your choice, and right click on the identify panel to
      bring up a contextual menu. From this menu select <italic>Edit
      Feature Form</italic>. Edit the attribute table, e.g. changing the
      site type or the periodization, and saving your edits.</p>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/qgis-identify-attr-table.png"/>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/qgis-attr-table.png"/>
          <p>Now let’s also change the location of one of the points. It can
      either be the same one or another, but for an easier visualization
      later, it might be best to edit points near the one we added
      before. Use the move feature tool to do it and move a point a bit
      further from its actual location, saving the edits after.</p>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/qgis-move-feature.png"/>
        </sec>
        <sec id="inspect-working-copy-changes">
          <title>3.5.7 Inspect working copy changes</title>
          <p>One of the interesting aspects of Kart is the possibility of
      inspecting changes before commits. The QGIS plugin in particular
      offers a way of graphically visualize changes, both on a 2D map or
      in a table layout. To do so, return to the kart repository panel
      and right-click on the repository name, then click on the
      <italic>Show working copy changes…</italic> button (you can also
      right-click on a single layer to inspect changes only for that
      one).</p>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-panel-show-wc-changes.png"/>
          <p>The visual diff viewer panel will open. On the left we can see
      (in a tree-like structure) the layer that was edited
      (archaeo_sites, there would be more if we had edited more than one
      layer), the type of change (Added, Modified)m and the primary key
      of the added/modified entry. On the right, there are two types of
      diffs available, the Attributes table, and the Geometries tab. For
      the Added feature, the attribute table will be all green (as these
      are all new entries), and the geometry tab will not be much
      useful. However, if we switch to the <italic>Modified</italic>
      features, we can see that kart highlights the rows that have been
      modified in a convenient table with Old/New value pairs.</p>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-diff-attributes.png"/>
          <p>If we switch to the Geometries tab instead, and select the
      point that we have moved from the list on the left, then we will
      see how Kart highlights with transparency the previous location of
      the geometry/nodes and in a darker color the new location.</p>
          <p>On the top of the Geometries tab, there are also two dropdown
      dialogs, one (<italic>Additional Layers</italic>) related to the
      layer we want to show in the Diff Viewer <underline>in addition to
      the modified geometries</underline> (options are: Project Layer,
      OSM Basemap, No additional layers), and another (<italic>Diff
      type</italic>) related to how we want to visualize the Diff
      (options are: Transparency, Swipe, Per-vertex diff). We found both
      transparency and per-vertex diff to be particularly useful in case
      of polygon geometries.</p>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-diff-geometry.png"/>
          <p>Note that the kart CLI also offers a way to inspect changes to
      the working copy, through the <monospace>kart status</monospace>
      and <monospace>kart diff</monospace>
      <ext-link ext-link-type="uri" xlink:href="https://docs.kartproject.org/en/latest/pages/basic_usage_tutorial.html#making-and-committing-changes">commands</ext-link>.
      For example, for the edits that we just made the output would be
      something similar:</p>
          <boxed-text>
            <p>
              <bold>Expand</bold>
            </p>
            <code language="bash">kart status
On branch main

Changes in working copy:
  (use "kart commit" to commit)
  (use "kart restore" to discard changes)

  archaeo_sites:
    feature:
      1 inserts
      1 updates

kart diff
--- archaeo_sites:feature:914
+++ archaeo_sites:feature:914
-                                     Type = Settlement
+                                     Type = Fortified Settlement
-                               Morphology = Flat site on natural mound
+                               Morphology = Mound/Tell
-                                   Period = Roman-Byzantine
+                                   Period = Hellenistic
-                                StartDate = -63
+                                StartDate = -332
-                                  EndDate = 638
+                                  EndDate = -63
+++ archaeo_sites:feature:1103
+                                      fid = 1103
+                                 geometry = POINT(...)
+                                     Name = A new point
+                                  NameAlt = ␀
+                              AncientName = ␀
+                                     Type = Settlement
+                               Morphology = Flat site
+                                   Period = Hellenistic
+                                StartDate = -332
+                                  EndDate = -63
+                            ArchaeoStatus = Surveyed
+                                 Latitude = ␀
+                                Longitude = ␀
+                                 Northing = ␀
+                                  Easting = ␀
+                                  LocQual = A
+                                   SizeHa = ␀
+                                 SizeQual = C
+                               SiteHeight = ␀
+                                   Source = Archaeological Survey of Israel
+                                    Pages = ␀
+                                    Notes = ␀
+                                  Subtype = {"hamlet"}
+                                AltSource = ␀
+                           AltSourcePages = ␀
+                              AltSourceID = ␀
+                                AltSizeHa = ␀
+                              AltSizeQual = ␀
+                                 SourceID = 1kart status</code>
          </boxed-text>
        </sec>
        <sec id="commit-working-copy-changes">
          <title>3.5.8 Commit working copy changes</title>
          <p>Now that we inspected the changes made during editing, we can
      commit them, just like git. In QGIS, go back to the kart
      repositories panel and right-click on our repository, then select
      <italic>Commit working copy changes…</italic> (you can also
      discard them if you noticed some errors). A dialog will pop-up
      prompting you to enter a commit message. Write a descriptive
      commit message and then click on “Ok”. A green message at the top
      should inform you that the changes have been committed
      successfully (Changes correctly commited).</p>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-panel-commit.png"/>
          <p>You can achieve the same by using the CLI through the command
      <monospace>kart commit</monospace>
      (<ext-link ext-link-type="uri" xlink:href="https://docs.kartproject.org/en/latest/pages/command_reference.html#commit-changes-to-a-working-copy">relevant
      documentation</ext-link>).</p>
          <code language="bash">kart commit -m 'YOUR COMMIT MESSAGE'
[main be39e89] your commit message
  archaeo_sites:
    feature:
      1 inserts
      2 updates
  Date: Wed Apr 10 16:40:04 2024 +0200</code>
          <boxed-text>
            <p>
              <bold>Before proceeding</bold>
            </p>
            <p>Add a couple more points or modify existing ones, and make at
      least other two-three commits, by repeating the same steps above.
      You can also edit different layers, such has the table layers, or
      the survey_areas layers.</p>
          </boxed-text>
        </sec>
        <sec id="inspect-the-commit-tree">
          <title>3.5.9 Inspect the commit tree</title>
          <p>Now that we have more than just a couple of commits, we can use
      the visual log to inspect commits to our main branch. To access
      the log, right-click on our repository in the kart panel and click
      on <italic>Show log…</italic></p>
          <p>The log panel will appear (if you have worked with VSCode or
      any other editor providing a git-tree functionality, this will
      look very familiar). For now it will look rather simple as we are
      directly committing on a single branch and we have few commits.
      The corresponding command for the CLI is
      <monospace>kart log</monospace> (note: if you are using pagers for
      git, these will not work with kart of course)</p>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-log.png"/>
        </sec>
        <sec id="inspect-changes-introduced-in-a-specific-commit-and-other-options">
          <title>3.5.10 Inspect changes introduced in a specific commit (and
      other options)</title>
          <p>In the QGIS plugin, we can inspect, using the Visual Diff tool,
      changes introduced by each commit we made. We can bring up a
      contextual menu by right-clicking on a commit, and a number of
      options will show. We will not inspect all the options visible in
      the image below, but they should be self-explanatory, especially
      if you are familiar with git.</p>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-log-right-click.png"/>
        </sec>
      </sec>
      <sec id="sec-collaboration">
        <title>3.6 Collaborating with Kart</title>
        <p>While kart is perfectly usable on a local machine only, the goal
    here is to collaborate with other people. In our workflow, every
    person can make edits to the layers that need to be worked on. Git
    is, in general, a very good collaboration tool, and thus kart
    potentially offers similar advantages. We will explore a very simple
    worklow: we will simulate one colleague creating a secondary branch
    from <monospace>main</monospace>, adds the edits needed, and then
    merge back into <monospace>main</monospace>, where another colleague
    have already added geometries to the same layers. Since we are using
    a geopackage, we will have to deal with conflicts, so we will
    explore that too.</p>
        <boxed-text>
          <p>
            <bold>Warning</bold>
          </p>
          <p>Here we are using the <monospace>main</monospace> branch as an
    example to avoid too much redundancy, but this is usually <bold>not
    a good practice</bold>, as usually is best to have everyone working
    on secondary branches. As suggested in
    <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart/issues/814#issuecomment-1498167436">this
    comment</ext-link>, it is recommended that one user will do the
    merge, push the changes, and any other user will use the merged
    branch as starting point for any new edits in order to avoid further
    conflicts. This means that after the merge into main is completed
    and the updated main has been pushed to remote, new edits
    <bold>should be done on new branches created from the updated main
    branch</bold> (after updating the local main branch with
    <monospace>kart pull</monospace>).</p>
        </boxed-text>
        <sec id="sec-branching">
          <title>3.6.1 Branching</title>
          <p>Branching is a common way to implement features and changes
      isolated from the main working tree and from other people working
      on the same dataset. The <monospace>main</monospace> branch is the
      default branch upon repository creation.</p>
          <p>In order to create a new branch, you can use the graphical
      plugin by right-clicking on the repository name and then click on
      <italic>Switch branch..</italic> On the the new dialog click on
      <italic>Create New</italic>. In the new dialog pop-up select the
      name of the new branch (e.g. <monospace>dev</monospace>) and then
      click on <italic>OK</italic>.</p>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-panel-branch.png"/>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-panel-switch-new.png"/>
          <p>You can reproduce the exact same behavior with less clicks
      using the following command in your terminal when in the kart
      repo: <monospace>kart checkout -b dev</monospace>.</p>
          <p>Your worktree will switch to the new branch automatically. If
      you need to switch back to <monospace>main</monospace> again, from
      the plugin panel use the same <italic>Switch branch..</italic>
      option and select <monospace>main</monospace> from the dropdown
      menu. From the CLI you can use
      <monospace>kart switch main</monospace> or
      <monospace>kart checkout main</monospace>.</p>
          <p>If you use the CLI, the changes should be immediately visible
      in the plugin panel in QGIS, if that’s not the case, you can
      refresh using <monospace>F5</monospace> or by right-clicking on
      the repo and click <italic>Refresh</italic>.</p>
          <p>You can also see the two branches (at the same point in the
      kart tree) using the <italic>Show log..</italic> button from the
      kart repo panel.</p>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-panel-branches-log.png"/>
          <disp-quote>
            <p>For more general information about branches: see the
        <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart-qgis-plugin/blob/main/docs/index.md#working-with-branches">Kart
        QGIS Plugin docs</ext-link> and the
        <ext-link ext-link-type="uri" xlink:href="https://docs.kartproject.org/en/latest/pages/quick_guide.html#branching">Kart
        docs</ext-link> and
        <ext-link ext-link-type="uri" xlink:href="https://docs.kartproject.org/en/latest/pages/command_reference.html#branching-and-merging">command
        reference</ext-link>.</p>
          </disp-quote>
          <sec id="add-features-on-the-new-branch">
            <title>3.6.1.1 Add features on the new branch</title>
            <p>Let’s now add 3 new points to the
        <italic>archaeo_sites</italic> layer while on the
        <monospace>dev</monospace> branch. The procedure is the same as
        the one highlighted in the previous sections
        (<xref alt="Section 3.5.5" rid="sec-add-geom">Section 3.5.5</xref>).
        Let’s also commit this changes and inspect the worktree to see
        that the <monospace>dev</monospace> branch is now ahead of
        <monospace>main</monospace> by 1 commit.</p>
            <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-panel-dev-branch-ahead.png"/>
          </sec>
          <sec id="add-features-to-the-main-branch">
            <title>3.6.1.2 Add features to the main branch</title>
            <p>To simulate a collaborative situation, switch back to the
        <monospace>main</monospace> branch (using the plugin interface
        of <monospace>kart switch</monospace>) and add 2 points to the
        same <italic>archaeo_sites</italic> layer and commit our
        changes.</p>
          </sec>
        </sec>
        <sec id="sec-merging">
          <title>3.6.2 Merging</title>
          <p>We want our changes on the <monospace>dev</monospace> branch to
      be incorporated on the <monospace>main</monospace> branch. To do
      this we can use the graphical plugin to start a merge. While on
      the <monospace>main</monospace> branch, right-click on the
      repository and select <italic>Merge into current branch..</italic>
      In the new panel you can provide a merge message and select other
      options, but for now let’s just make sure to select
      <monospace>dev</monospace> from the dropdown corresponding to
      <bold>Branch.</bold></p>
          <p>You can do the same in the terminal by using
      <monospace>kart merge dev</monospace>, make sure you are on the
      <monospace>main</monospace> branch.</p>
          <p>If there are no conflicts, kart will merge using the
      fast-forward option(thus we will not find a “merge” commit in your
      commit history) and our branch main will be updated with the edits
      from the other branch. However, this is not the case now.</p>
          <p>If you did like we did above, you will likely see a message
      telling you that there were conflicts during the merge, and that
      these conflicts need to be resolved before continuing with the
      merge.</p>
          <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-panel-conflicts.png"/>
          <p>If you use the command line, you will receive a similar
      message:</p>
          <code language="bash">kart merge dev

Merging branch "dev" into main
Conflicts found:

archaeo_sites:
    archaeo_sites:feature: 2 conflicts

Repository is now in "merging" state.
View conflicts with `kart conflicts` and resolve them with `kart resolve`.
Once no conflicts remain, complete this merge with `kart merge --continue`.
Or use `kart merge --abort` to return to the previous state.</code>
        </sec>
        <sec id="sec-conflicts">
          <title>3.6.3 Dealing with conflicts</title>
          <p>When conflicts are encountered, the repository enters into a
      <bold>merging</bold> state. In this state no changes can be made
      to the dataset until the conflicts are resolved. Three options are
      available to us:</p>
          <list list-type="order">
            <list-item>
              <p>Solve the conflicts</p>
            </list-item>
            <list-item>
              <p>Continue merge (this will not work until conflicts are
          solved)</p>
            </list-item>
            <list-item>
              <p>Abort the merge (return to the previous state before the
          merge command)</p>
            </list-item>
          </list>
          <p>We want to solve our conflicts. When working with geopackages,
      the most likely conflict comes from conflicting primary keys (in
      the <monospace>fid</monospace> field).</p>
          <sec id="viewing-conflicts">
            <title>3.6.3.1 Viewing conflicts</title>
            <p>To solve our conflicts we need first to see what is actually
        conflicting. With the QGIS plugin, right click on the repository
        and select <italic>Resolve conflicts…</italic></p>
            <boxed-text>
              <p>
                <bold>Note</bold>
              </p>
              <p>Currently we are unable to access the graphical tool due to a
        possible bug in kart, thus we will continue with the CLI only.
        We will update this tutorial with the relevant info once we get
        past this issue. If you don’t want to use the CLI, you can try
        following the
        <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart-qgis-plugin/blob/main/docs/index.md#working-with-branches">kart
        plugin docs</ext-link> about solving conflicts and then continue
        on to the next section.</p>
            </boxed-text>
            <p>To see the conflicts on the CLI, use
        <monospace>kart conflicts</monospace> to generate a list of
        conflicting features. While not immediately noticeable, you will
        see that each feature has a <monospace>:ours</monospace> or
        <monospace>:theirs</monospace> after its name, indicating at
        which branch they pertain, <monospace>ours</monospace> meaning
        the branch you are currently on, and
        <monospace>theirs</monospace> meaning the branch you are mergin
        from. In our case, ours is <monospace>main</monospace> and
        theirs is yourbranchname (or how your feature branch is called).
        This view does not really tell you which fields are conflicting,
        but if you look at the <monospace>fid</monospace> you will see
        that they are duplicated.</p>
            <boxed-text>
              <p>
                <bold>Expand</bold>
              </p>
              <code language="bash">kart conflicts
archaeo_sites:
    archaeo_sites:feature:
        archaeo_sites:feature:1106:
            archaeo_sites:feature:1106:ours:
                                     fid = 1106
                                geometry = POINT(...)
                                    Name = A site on main branch
                                 NameAlt = ␀
                             AncientName = ␀
                                    Type = Building
                              Morphology = Flat site
                                  Period = Roman
                               StartDate = -63
                                 EndDate = 324
                           ArchaeoStatus = Surveyed
                                Latitude = ␀
                               Longitude = ␀
                                Northing = ␀
                                 Easting = ␀
                                 LocQual = A
                                  SizeHa = ␀
                                SizeQual = C
                              SiteHeight = ␀
                                  Source = kart4arch2024
                                   Pages = ␀
                                   Notes = ␀
                                 Subtype = {"farm"}
                               AltSource = ␀
                          AltSourcePages = ␀
                             AltSourceID = ␀
                               AltSizeHa = ␀
                             AltSizeQual = ␀
                                SourceID = 3
            archaeo_sites:feature:1106:theirs:
                                     fid = 1106
                                geometry = POINT(...)
                                    Name = A first site on dev
                                 NameAlt = ␀
                             AncientName = ␀
                                    Type = Settlement
                              Morphology = Flat site
                                  Period = Late Bronze Age
                               StartDate = -1550
                                 EndDate = -1150
                           ArchaeoStatus = Surveyed
                                Latitude = ␀
                               Longitude = ␀
                                Northing = ␀
                                 Easting = ␀
                                 LocQual = A
                                  SizeHa = ␀
                                SizeQual = C
                              SiteHeight = ␀
                                  Source = kart4arch2024
                                   Pages = ␀
                                   Notes = ␀
                                 Subtype = {"farm"}
                               AltSource = ␀
                          AltSourcePages = ␀
                             AltSourceID = ␀
                               AltSizeHa = ␀
                             AltSizeQual = ␀
                                SourceID = 5
        archaeo_sites:feature:1107:
            archaeo_sites:feature:1107:ours:
                                     fid = 1107
                                geometry = POINT(...)
                                    Name = Another site on main branch
                                 NameAlt = ␀
                             AncientName = ␀
                                    Type = Settlement
                              Morphology = Flat site on natural mound
                                  Period = Byzantine
                               StartDate = 324
                                 EndDate = 638
                           ArchaeoStatus = Surveyed
                                Latitude = ␀
                               Longitude = ␀
                                Northing = ␀
                                 Easting = ␀
                                 LocQual = A
                                  SizeHa = ␀
                                SizeQual = C
                              SiteHeight = ␀
                                  Source = kart4arch2024
                                   Pages = ␀
                                   Notes = ␀
                                 Subtype = {"hamlet"}
                               AltSource = ␀
                          AltSourcePages = ␀
                             AltSourceID = ␀
                               AltSizeHa = ␀
                             AltSizeQual = ␀
                                SourceID = 4
            archaeo_sites:feature:1107:theirs:
                                     fid = 1107
                                geometry = POINT(...)
                                    Name = A second site on dev
                                 NameAlt = ␀
                             AncientName = ␀
                                    Type = Fortified Settlement
                              Morphology = Mound/Tell
                                  Period = Iron Age II
                               StartDate = -950
                                 EndDate = -586
                           ArchaeoStatus = Surveyed
                                Latitude = ␀
                               Longitude = ␀
                                Northing = ␀
                                 Easting = ␀
                                 LocQual = A
                                  SizeHa = ␀
                                SizeQual = C
                              SiteHeight = ␀
                                  Source = kart4arch2024
                                   Pages = ␀
                                   Notes = ␀
                                 Subtype = {"fortification"}
                               AltSource = ␀
                          AltSourcePages = ␀
                             AltSourceID = ␀
                               AltSizeHa = ␀
                             AltSizeQual = ␀
                                SourceID = 6</code>
            </boxed-text>
          </sec>
          <sec id="solving-conflicts">
            <title>3.6.3.2 Solving conflicts</title>
            <p>We need now to resolve the conflicts. In git you will be
        thrown in the text editor, but kart lets us choose the way in
        which to resolve it. However, the way indicated on the official
        documentation
        (<ext-link ext-link-type="uri" xlink:href="https://docs.kartproject.org/en/latest/pages/command_reference.html#resolving-a-conflict"><monospace>kart revolve --with=(ancestors|ours|theirs|delete)</monospace></ext-link>)
        does not include, at the time of writing (2023-12-06) the most
        suitable option, i.e. automatically renumbering the features.
        This is instead only documented on a
        <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart/pull/817">pull
        request</ext-link>, so we report it here too (note that however
        the option is visible in the <italic>man page</italic> using
        <monospace>kart resolve --help)</monospace>.</p>
            <p>Since Kart version
        <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart/releases/tag/v0.12.3">0.12.3</ext-link>,
        there is a
        <monospace>kart revolve --renumber=(ours|theirs)</monospace>
        command that is intended to automatically resolve primary key
        conflicts during merge operations. The
        <monospace>--renumber</monospace> flag takes one of the two
        options: <monospace>ours</monospace> or
        <monospace>theirs</monospace>, with ours meaning the branch we
        are currently on, and theirs meaning the branch we are merging
        from.</p>
            <p>Let’s use
        <monospace>kart resolve --renumber=theirs</monospace> or
        <monospace>ours</monospace> by typing the command in our
        terminal.</p>
            <p>We suggest using <monospace>theirs</monospace> as to preserve
        the order of features originally present in the main branch, but
        feel free to use <monospace>ours</monospace> if you prefer (see
        below).</p>
            <boxed-text>
              <p>
                <bold>Caution</bold>
              </p>
              <p>If there is only a partial overlapping of primary keys, kart
        will merge those keys that can be merged, while the other
        features will wait for the conflict resolution to be renumbered.
        This means that if you have some keys in the
        <monospace>yourbranchname</monospace> branch that do not overlap
        with primary keys in your <monospace>main</monospace> branch,
        and you use <monospace>theirs</monospace> as an option for
        renumbering, these primary keys will be added first after the
        keys already present in <monospace>main</monospace> (as
        mentioned
        <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart/pull/817">here</ext-link>).
        This will break the sequential order of features from the
        secondary branch, however, it is more of a visual issue than a
        real one, unless you are relying on the order of those primary
        keys for other operations.</p>
            </boxed-text>
            <p>After running the command, you should see something like
        this:</p>
            <code language="bash">kart resolve --renumber=theirs
Resolved 2 conflicts. 0 conflicts to go.
Use `kart merge --continue` to complete the merge</code>
            <p>As adivides by the CLI, let’s run
        <monospace>kart merge --continue</monospace> to finish the merge
        (this can be done also in the graphical plugin).</p>
            <sec id="sec-text-editors">
              <title>3.6.3.2.1 A note about terminal text editors</title>
              <p>By default, you will be prompted to insert a commit message
          inside a terminal text editor. Which text editor this will be
          is dependent on your machine, OS, and configuration. If you
          have set the <monospace>$VISUAL</monospace> or
          <monospace>$EDITOR</monospace> variables in your shell, then
          you will know what will be opened. If not, you will either be
          put inside nano/emacs or vi/vim.</p>
              <boxed-text>
                <p>
                  <bold>With some possible differences, the interface will be
          like this for vi/vim</bold>
                </p>
                <fig>
                  <caption>
                    <p>vi/vim interface</p>
                  </caption>
                  <graphic mimetype="image" mime-subtype="png" xlink:href="img/vi_interface.png"/>
                </fig>
              </boxed-text>
              <boxed-text>
                <p>
                  <bold>And like this for nano/emacs:</bold>
                </p>
                <fig>
                  <caption>
                    <p>nano/emacs interface</p>
                  </caption>
                  <graphic mimetype="image" mime-subtype="png" xlink:href="img/nano_interface.png"/>
                </fig>
              </boxed-text>
              <p>You will already have a commit message written for you,
          something like
          <monospace>Merge branch "dev" into main</monospace>.
          You can edit the message (see below) or accept the defaul by
          using <monospace>ctrl+x</monospace> in nano/emacs or
          <monospace>:wq</monospace> in vi/vim.</p>
              <p>To edit the message in nano, start typing at the top of the
          top of the file. When you are finished, the menu at the bottom
          should tell you how to quit and save. Press ctrl+x (the
          <monospace>^</monospace> means ctrl) to exit. When asked to
          save the buffer, press <monospace>y</monospace> to
          confirm.</p>
              <p>To edit the message in vi/vim, press
          <monospace>i</monospace> to be able to type (this might not be
          necessary). Type the commit message and when satisfied press
          <monospace>:q</monospace> to exit (typing
          <monospace>:q!</monospace> will exit without saving the
          file).</p>
              <p>The text editor will close and the terminal will output the
          details of the commit and the date, plus some other info.</p>
              <p>If everything went well you will see a message like
          this:</p>
              <code language="bash">Merging branch "dev" into main
No conflicts!
Merge committed as 890e2455fe81f0e58c5c5bed8cb7010e4fb174f8
Updating kart-tutorial.gpkg ..</code>
              <p>And your repo will be available to edit again. Check the
          features and you will see that the <monospace>main</monospace>
          branch now includes also the ones from
          <monospace>dev</monospace>.</p>
              <p>You can inspect the worktree to see how the branches
          diverged and how the merge commit was created.</p>
              <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-panel-merge-result.png"/>
              <disp-quote>
                <p>See also
            <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart-qgis-plugin/blob/main/docs/index.md#working-with-branches">Kart
            QGIS plugin docs</ext-link> and
            <ext-link ext-link-type="uri" xlink:href="https://docs.kartproject.org/en/latest/pages/command_reference.html#resolving-conflicts">Kart
            docs</ext-link> on resolving conflicts and
            our<ext-link ext-link-type="uri" xlink:href="https://github.com/UnitoAssyrianGovernance/.github/wiki/GIS-Vector-Data#dealing-with-conflicts">Wiki
            on the same topic</ext-link>. A useful
            <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart/issues/814">github
            issue</ext-link> about solving conflicts in multi-user
            scenario.</p>
              </disp-quote>
            </sec>
          </sec>
          <sec id="delete-branches">
            <title>3.6.3.3 Delete branches</title>
            <p>Now that we have merged the features, we can safely delete
        the <monospace>dev</monospace> branch to clean our kart
        repository. To our knowledge this option is still not available
        through the graphical plugin.</p>
            <boxed-text>
              <p>
                <bold>Note</bold>
              </p>
              <p>You cannot delete the branch you are currently on, so you
        will need to switch to another branch in order to delete it.</p>
            </boxed-text>
            <p>To delete a branch you can use this command
        <monospace>kart branch -d dev</monospace> (the
        <monospace>d</monospace> flag stands for
        <italic>delete</italic>).</p>
            <p>You should see a confirmation message:</p>
            <code language="bash">Deleted branch dev (was ba24402).</code>
            <p>And you can confirm there is only one branch by running
        <monospace>kart branch -v</monospace> in the terminal:</p>
            <code language="bash">kart branch -a
* main</code>
            <boxed-text>
              <p>
                <bold>Important</bold>
              </p>
              <p>If you do not delete you development branch, remember to
        start new works by creating new branches from the
        <monospace>main</monospace> one, otherwise your might branch
        from outdated dataset!</p>
            </boxed-text>
          </sec>
        </sec>
        <sec id="push-changes-to-a-remote-repository">
          <title>3.6.4 Push changes to a remote repository</title>
          <p>Let’s say you are finishing your work and you want to backup
      your data outside of your machine, or you need to collaborate
      remotely with other people, thus you need to use</p>
          <sec id="connect-to-a-remote-repository">
            <title>3.6.4.1 Connect to a remote repository</title>
            <p>Check that the repository has no remotes with
        <monospace>kart remotes -v</monospace>.</p>
            <p>If you cloned the repository in the initial steps
        (<xref alt="Section 3.4" rid="sec-clone-repo">Section 3.4</xref>),
        you might see some remotes (<underline>if you don’t, skip this
        part</underline>):</p>
            <code language="bash">kart remote -v
origin  https://github.com/UnitoAssyrianGovernance/kart-tutorial.git (fetch)
origin  https://github.com/UnitoAssyrianGovernance/kart-tutorial.git (push)</code>
            <p>You will not be able to make push to these remotes, but to
        avoid confusion remove these remotes from kart using the
        following: <monospace>kart remote rm origin</monospace> (don’t
        worry, this will not impact the repository), and confirm again
        you have no more remotes using
        <monospace>kart remotes -v</monospace>.</p>
            <sec id="create-a-remote-repository">
              <title>3.6.4.1.1 Create a remote repository</title>
              <p>Create a remote repository on your forge of choice, in our
          case Github, by following the respective
          <ext-link ext-link-type="uri" xlink:href="https://docs.github.com/en/repositories/creating-and-managing-repositories/creating-a-new-repository">instructions</ext-link>.</p>
              <boxed-text>
                <p>
                  <bold>Warning</bold>
                </p>
                <p>As a general rule of thumb, if you are creating a
          repository from one online forges, remember to NOT include any
          README.md, .gitignore, or other files. Best-case scenario they
          will be ignored by kart, but worst-case they might break your
          workflow, as kart will recognize an out-of-sync remote with no
          real means of fixing it.</p>
              </boxed-text>
              <graphic mimetype="image" mime-subtype="png" xlink:href="img/github-create-repo.png"/>
            </sec>
            <sec id="connect-with-the-kart-qgis-plugin">
              <title>3.6.4.1.2 Connect with the kart QGIS plugin</title>
              <p>To connect to a remote repository through a graphical
          interface, right-click on the repository panel and click on
          <italic>Push..</italic></p>
              <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-panel-push.png"/>
              <p>In the new dialog, click on <italic>Manage
          remotes</italic>.</p>
              <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-panel-push-manage.png"/>
              <p>In the new dialog, give a name to the Remote (e.g. github
          or origin) and the URL you will see after creating the new
          repository in the previous steps. This URL will be something
          like
          <monospace>https://github.com/yourusername/kart-tutorial.git</monospace>
          for HTTPS and
          <monospace>git@github.com:``yourusername``/kart-tutorial.git</monospace>
          for SSH (see above for HTTPS and SSH in
          <xref alt="Section 3.2" rid="sec-https-ssh">Section 3.2</xref>).
          After adding this information, click on <italic>Add
          New/Save</italic> and then on <italic>Ok</italic> to close the
          dialog.</p>
              <graphic mimetype="image" mime-subtype="png" xlink:href="img/kart-panel-remotes-add.png"/>
              <p>You will be back in the previous panel with the chosen
          remote added in the dropdown (you can add more than one!).</p>
            </sec>
            <sec id="connect-with-the-kart-cli">
              <title>3.6.4.1.3 Connect with the kart CLI</title>
              <p>To add a remote using the CLI, you can use
          <monospace>kart remote add origin URL</monospace>, replacing
          the URL with the ones mentioned above. Check if the remotes
          have been added using <monospace>kart remotes -v</monospace>
          once again, you should see two entries with your URL, one for
          fetch and one for push.</p>
              <boxed-text>
                <p>
                  <bold>Note</bold>
                </p>
                <p><monospace>origin</monospace> is a convention, you can name
          your remote however you want, just make sure to use the name
          you choose in the next commands.</p>
              </boxed-text>
            </sec>
          </sec>
          <sec id="push-changes">
            <title>3.6.4.2 Push changes</title>
            <p>If you are using the graphical plugin, in the Push panel,
        click <italic>Ok</italic>. A green message should tell you that
        the push was successful. If you encounter en error saying that
        the device is not configured, it is likely an HTTPS
        authentication issue. You have some options:</p>
            <list list-type="order">
              <list-item>
                <p>Make sure you are authenticated to github and that git
            has your credentials stored globally.</p>
              </list-item>
              <list-item>
                <p>Use the CLI</p>
              </list-item>
              <list-item>
                <p>Use SSH (which should be more reliable)</p>
              </list-item>
            </list>
            <disp-quote>
              <p>Unfortunately the reason for an error might be a lot, if
          you encounter some reach out to us and we will help as much as
          we can :)</p>
            </disp-quote>
            <p>If you are using the CLI, run
        <monospace>kart push -u origin main</monospace> (<bold>origin is
        the name of the remote, change it accordingly</bold>). If you
        have not set your credentials before, you will be asked for your
        forge username and token. If not, you will be able to push and
        you should see something like this in your terminal:</p>
            <code language="bash">kart push -u origin main

Enumerating objects: 892, done.
Counting objects: 100% (892/892), done.
Writing objects: 100% (892/892), 226.96 KiB | 113.48 MiB/s, done.
Total 892 (delta 0), reused 892 (delta 0), pack-reused 0
To https://github.com/yourusername/kart-tutorial.git
 * [new branch]      main -&gt; main
branch 'main' set up to track 'origin/main'.</code>
            <p>Congratulations! your changes have been pushed to a remote
        repo and are accessible to your collaborators if needed!</p>
            <boxed-text>
              <p>
                <bold>Note</bold>
              </p>
              <p>In the same way, if you know that your remote has more recent
        changes that your local machine, you can use
        <monospace>kart pull</monospace> or the respective button in the
        kart plugin to pull changes from remote.</p>
              <p>It is always best to pull changes if you are unsure someone
        made edits before your work!</p>
            </boxed-text>
          </sec>
          <sec id="addendum-interact-with-remote-branches">
            <title>3.6.4.3 Addendum: Interact with remote branches</title>
            <sec id="push-new-branches-to-remote">
              <title>3.6.4.3.1 Push new branches to remote</title>
              <p>When using remote repository and different branches, is
          likely that you will be pushing this branches to the remote
          repository. Here we will explain how to interact with them. We
          will provide only terminal commands for simplicity, but you
          can refer to the previous sections to replicate this with the
          graphical plugin.</p>
              <p>Let’s create a new branch from <monospace>main</monospace>
          by using <monospace>kart checkout -b feature</monospace>.</p>
              <p>To make the new branch appear on the remote repository, use
          the <monospace>push</monospace> command again:
          <monospace>kart push -u origin feature</monospace>. You will
          see something like this:</p>
              <code language="bash">kart push -u origin feature

Total 0 (delta 0), reused 0 (delta 0), pack-reused 0
remote:
remote: Create a pull request for 'feature' on GitHub by visiting:
remote:      https://github.com/yourusername/kart-tutorial/pull/new/feature
remote:
To https://github.com/yourusername/kart-tutorial.git
 * [new branch]      feature -&gt; feature
branch 'feature' set up to track 'origin/feature'.</code>
              <p>Now you can work on your new branch, push to remote and
          continue your work.</p>
            </sec>
            <sec id="pull-new-branches-from-remote">
              <title>3.6.4.3.2 Pull new branches from remote</title>
              <p>You can also pull changes made by another person from
          another branch to you local machine. To simulate this, let’s
          head to your forge of choice (in our case github) and create a
          new branch from the web interface (most forges should have a
          way to do that, see e.g. the
          <ext-link ext-link-type="uri" xlink:href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-and-deleting-branches-within-your-repository">docs
          for github</ext-link>).</p>
              <p>Create a new branch from Github, using our
          <monospace>main</monospace> branch as source (we can call it
          <monospace>remote-branch</monospace> or anything else you
          want).</p>
              <graphic mimetype="image" mime-subtype="png" xlink:href="img/github-create-new-branch.png"/>
              <p>After that, you can use <monospace>kart pull</monospace> to
          pull information from the remote repository, you should see
          something like this:</p>
              <code language="bash">kart pull

 * [new branch]      remote-branch -&gt; origin/remote-branch
Merging 890e245 into feature
Already up to date</code>
              <p>And running <monospace>kart branch -a</monospace> confirm
          that everything has been updated correctly:</p>
              <code language="bash">kart branch -a

* feature
  main
  remotes/origin/feature
  remotes/origin/main
  remotes/origin/remote-branch</code>
              <p>You can see from the above that the
          <monospace>remote-branch</monospace> is only existing on the
          remote repository, not in your machine (there are two entries
          for any branch except this one). If you want to work on this
          branch, you can simply run
          <monospace>kart switch remote-branch</monospace>, and the new
          branch will be automatically linked to the remote one.</p>
              <code language="bash">kart switch remote-branch

Creating new branch 'remote-branch' to track 'origin/remote-branch'...</code>
            </sec>
            <sec id="delete-local-and-remote-branches">
              <title>3.6.4.3.3 Delete local and remote branches</title>
              <p>If you want to delete a local branch that you already
          pushed on remote, you need some few additional steps.</p>
              <list list-type="order">
                <list-item>
                  <p>Delete your local development branch with
              <monospace>kart branch -d remote-branch</monospace>,
              replacing remote-branch with the actual name of your
              branch. Note that you cannot delete the branch you are
              currently on, so you will need to switch to another branch
              in order to delete it.</p>
                </list-item>
                <list-item>
                  <p>Use
              <monospace>kart push origin --delete remote-branch</monospace>,
              replacing remote-branch with the actual name of your
              development branch.</p>
                </list-item>
                <list-item>
                  <p>If you deleted the branch on the remote forge/github
              before deleting it locally on your machine, the previous
              command will fail. You will need to update the remote
              information locally using
              <monospace>kart fetch --prune</monospace>, which will
              usually tell you that the remote branch is deleted. Then
              you can proceed to delete the local branch as in the step
              <monospace>1</monospace>.</p>
                </list-item>
              </list>
              <code language="bash">kart branch -d remote-branch

Deleted branch remote-branch (was 890e245).

kart push origin --delete remote-branch

To https://github.com/yourusername/kart-tutorial.git
 - [deleted]         remote-branch</code>
              <p>You can go on your forge to see that the changes have been
          reflected over there too.</p>
            </sec>
          </sec>
        </sec>
      </sec>
    </sec>
    <sec id="tips">
      <title>4. Tips</title>
      <sec id="selective-import-tables">
        <title>4.1 <bold>Selective import tables</bold></title>
      </sec>
      <sec id="rename-data-on-import">
        <title>4.2 <bold>Rename data on import</bold></title>
      </sec>
      <sec id="create-data-from-qgis-and-start-version-them-with-kart">
        <title>4.3 <bold>Create data from QGIS and start version them with
    kart</bold></title>
        <p>In QGIS, new layers can be safely added to the kart geopackage
    using the <monospace>New Geopackage Layer</monospace> button.
    However, this layer will not be automatically tracked by kart, which
    needs to be told manually about their existence:</p>
        <p>Since version <monospace>0.12.3</monospace> (2023-04-26) kart
    provides the command <monospace>kart add-dataset</monospace>. This
    command tells kart to track layers that are present in the
    geopackage, but that were not imported through
    <monospace>kart import</monospace>. This command is mentioned in a
    <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart/issues/830">github
    issue</ext-link>, but it is not documented yet in the official
    documentation at the time of writing (2024-04-01), thus we put here
    a quick reference to document its existence.</p>
        <p>The workflow for creating and start versioning new layers in kart
    is as follows:</p>
        <list list-type="order">
          <list-item>
            <p>Create a new geopackage layer, either from scratch using the
        “New Geopackage Layer” dialog, or through the “Save as..” option
        if you have an existing layer already in your project.</p>
          </list-item>
          <list-item>
            <p>Open the terminal (the <monospace>add-dataset</monospace> is
        still not implemented in the kart qgis plugin) and navigate to
        the directory where your kart geopackage is located.</p>
          </list-item>
          <list-item>
            <p>Check if the layer is indeed present inside the geopackage by
        running
        <monospace>kart status --list-untracked-tables</monospace>. You
        should get something along the lines of:</p>
            <p specific-use="wrapper">
              <code language="bash">On branch main
Your branch is up to date with 'origin/main'.

Nothing to commit, working copy clean

Untracked tables:
  THE UNTRACKED LAYERS</code>
            </p>
          </list-item>
        </list>
        <p>NB: if you don’t see any untracked layers, make sure you
    created/saved the layer in the correct geopackage! NB: kart refers
    to Vector data as Table Datasets, which is why in the output you
    will see “tables” and not “layers” (which is more of a GIS
    concept).</p>
        <list list-type="order">
          <list-item>
            <label>4.</label>
            <p>Run <monospace>kart add-dataset YOUR-LAYER-NAME</monospace>
        (by replacing YOUR-LAYER-NAME with the actual name of the
        layer), kart will prompt for a commit message before starting to
        track the layer.</p>
          </list-item>
        </list>
        <p>Note that this also works for the layer styles when saved to the
    geopackage using the dialog option “Style -&gt; Save as Default
    -&gt; Datasource Database” (from the layer properties tab). Styles
    saved in this way are usually saved in a
    <monospace>layer_styles</monospace> table inside the geopackage. We
    can run <monospace>kart add-dataset layer_styles</monospace> to
    track any changes to the layer styles (check if the layer exists and
    if it is indeed untracked first).</p>
        <sec id="a-note-on-the-commit-message-when-running-kart-add-dataset">
          <title>4.3.1 A note on the commit message when running
      <monospace>kart add-dataset</monospace></title>
          <p>You will be thrown in your terminal text editor (see
      <xref alt="Section 3.6.3.2.1" rid="sec-text-editors">Section 3.6.3.2.1</xref>
      to manage the commit message).</p>
        </sec>
        <sec id="addendum---layer-styles">
          <title>4.3.2 Addendum - layer styles</title>
          <boxed-text>
            <p>
              <bold>Warning</bold>
            </p>
            <p>Note that, at the time of writing (2023-11-15), due to a small
      mishandling of layer_styles schema by QGIS, if your layer name is
      longer than 30 characters and your style is named with the same
      name as the layer, you will incur into an error when trying to run
      <monospace>kart add-dataset layer_styles</monospace>. As explained
      <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart/issues/873">in
      this issue</ext-link>, this is not a kart bug. We recommend
      keeping the layer style name (or the layer names) below 30
      characters to avoid issues.</p>
          </boxed-text>
        </sec>
      </sec>
    </sec>
    <sec id="sec-resources">
      <title>5. Useful Resources</title>
      <list list-type="bullet">
        <list-item>
          <p>
            <ext-link ext-link-type="uri" xlink:href="https://kartproject.org/">Kart
      website</ext-link>
          </p>
        </list-item>
      </list>
      <sec id="documentation">
        <title>5.1 Documentation</title>
        <list list-type="bullet">
          <list-item>
            <p>
              <ext-link ext-link-type="uri" xlink:href="https://docs.kartproject.org/en/latest/index.html">Kart
        documentation</ext-link>
            </p>
          </list-item>
          <list-item>
            <p>
              <ext-link ext-link-type="uri" xlink:href="https://docs.kartproject.org/en/latest/pages/command_reference.html">Kart
        command reference</ext-link>
            </p>
          </list-item>
          <list-item>
            <p>
              <ext-link ext-link-type="uri" xlink:href="https://github.com/koordinates/kart-qgis-plugin/blob/main/docs/index.md#kart-plugin-user-documentation">Kart
        QGIS plugin documentation</ext-link>
            </p>
          </list-item>
        </list>
      </sec>
      <sec id="other-resources">
        <title>5.2 Other resources</title>
        <sec id="presentations-about-kart">
          <title>5.2.1 Presentations about kart</title>
          <list list-type="bullet">
            <list-item>
              <p>Coup, R. (2022a).
          <ext-link ext-link-type="uri" xlink:href="https://www.youtube.com/watch?v=fAIh6p4rczY">Kart:
          An introduction to practical data versioning for
          geospatial</ext-link>.</p>
            </list-item>
            <list-item>
              <p>Coup, R. (2022b).
          <ext-link ext-link-type="uri" xlink:href="https://www.youtube.com/watch?v=_7ETwmMlUtY">Kart:
          A Practical Tool for Versioning Geospatial
          Data</ext-link>.</p>
            </list-item>
            <list-item>
              <p>Coup, R. (2023).
          <ext-link ext-link-type="uri" xlink:href="https://www.youtube.com/watch?v=AxOTE2CCY3s">2023
          QGIS Data Versioning with Kart</ext-link>.</p>
            </list-item>
            <list-item>
              <p>Olaya, V. (2022).
          <ext-link ext-link-type="uri" xlink:href="https://www.youtube.com/watch?v=aABc3JrgJUY">Spatial
          data versioning with the Kart QGIS Plugin</ext-link>.</p>
            </list-item>
          </list>
        </sec>
        <sec id="guides-and-tutorials-about-git">
          <title>5.2.2 Guides and tutorials about Git</title>
          <list list-type="bullet">
            <list-item>
              <p>
                <ext-link ext-link-type="uri" xlink:href="https://dev.to/jitendrachoudhary/understanding-git-a-beginners-guide-to-version-control-with-visuals-5cbf">Understanding
          Git: A Beginner’s Guide to Version Control (With
          Visuals)</ext-link>
              </p>
            </list-item>
            <list-item>
              <p>
                <ext-link ext-link-type="uri" xlink:href="https://www.atlassian.com/git">Getting
          Git Right</ext-link>
              </p>
            </list-item>
            <list-item>
              <p>
                <ext-link ext-link-type="uri" xlink:href="https://rogerdudler.github.io/git-guide/index.html">Git:
          the simple guide</ext-link>
              </p>
            </list-item>
            <list-item>
              <p>
                <ext-link ext-link-type="uri" xlink:href="https://git-scm.com/doc">Git
          Official Documentation with useful resources</ext-link>
              </p>
            </list-item>
            <list-item>
              <p>
                <ext-link ext-link-type="uri" xlink:href="https://git-scm.com/doc/ext">Other
          tutorials from the Git website</ext-link>
              </p>
            </list-item>
          </list>
        </sec>
        <sec id="qgis">
          <title>5.2.3 QGIS</title>
          <list list-type="bullet">
            <list-item>
              <p>
                <ext-link ext-link-type="uri" xlink:href="https://qgis.org">QGIS
          Website</ext-link>
              </p>
            </list-item>
            <list-item>
              <p>
                <ext-link ext-link-type="uri" xlink:href="https://docs.qgis.org/latest/en/docs/user_manual/">QGIS
          User Guide</ext-link>
              </p>
            </list-item>
            <list-item>
              <p>
                <ext-link ext-link-type="uri" xlink:href="https://docs.qgis.org/3.34/en/docs/training_manual/">QGIS
          Training Manual</ext-link>
              </p>
            </list-item>
            <list-item>
              <p>
                <ext-link ext-link-type="uri" xlink:href="https://docs.qgis.org/3.34/en/docs/gentle_gis_introduction/">A
          Gentle Introduction to QGIS</ext-link>
              </p>
            </list-item>
          </list>
        </sec>
      </sec>
    </sec>
  </body>
  <back>
</back>
</article>
